<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2018

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="xs fn">
	<xsl:output method="xml" encoding="UTF-8" byte-order-mark="no" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var3_article" as="node()?" select="article"/>
		<item xmlns="http://data.iet.org/schemas/inspec/content" xmlns:ag="http://data.iet.org/schemas/agency" xmlns:an="http://data.iet.org/schemas/annotation" xmlns:co="http://data.iet.org/schemas/concept" xmlns:c="http://data.iet.org/schemas/core" xmlns:ev="http://data.iet.org/schemas/inspec/event">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://data.iet.org/schemas/inspec/content file:///C:/GitHub/Inspec2/iet-schemas/src/main/resources/schemas/inspec2/inspec-content.xsd'"/>
			<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:title-group[fn:namespace-uri() eq '']">
				<title>
					<xsl:for-each select="*:article-title[fn:namespace-uri() eq '']/node()">
						<xsl:if test="fn:boolean(self::text())">
							<xsl:sequence select="fn:string(.)"/>
						</xsl:if>
						<xsl:variable name="var1_test_resultof_node_name_equal_qname" as="node()?">
							<xsl:if test="fn:boolean(self::*:sub[fn:namespace-uri() eq ''])">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:variable>
						<xsl:for-each select="$var1_test_resultof_node_name_equal_qname">
							<c:sub>
								<xsl:sequence select="fn:string(.)"/>
							</c:sub>
						</xsl:for-each>
						<xsl:variable name="var2_test_resultof_node_name_equal_qname" as="node()?">
							<xsl:if test="fn:boolean(self::*:sup[fn:namespace-uri() eq ''])">
								<xsl:sequence select="."/>
							</xsl:if>
						</xsl:variable>
						<xsl:for-each select="$var2_test_resultof_node_name_equal_qname">
							<c:sup>
								<xsl:sequence select="fn:string(.)"/>
							</c:sup>
						</xsl:for-each>
					</xsl:for-each>
				</title>
			</xsl:for-each>
			<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:abstract[fn:namespace-uri() eq '']">
				<abstract>
					<xsl:sequence select="()"/>
				</abstract>
			</xsl:for-each>
			<pagination>
				<pageRange>
					<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:fpage[fn:namespace-uri() eq '']">
						<xsl:attribute name="from" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:lpage[fn:namespace-uri() eq '']">
						<xsl:attribute name="to" namespace="" select="fn:string(.)"/>
					</xsl:for-each>
				</pageRange>
				<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:counts[fn:namespace-uri() eq '']/*:page-count[fn:namespace-uri() eq '']">
					<pageCount>
						<xsl:sequence select="()"/>
					</pageCount>
				</xsl:for-each>
			</pagination>
			<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:counts[fn:namespace-uri() eq '']/*:ref-count[fn:namespace-uri() eq '']">
				<referenceCount>
					<xsl:sequence select="()"/>
				</referenceCount>
			</xsl:for-each>
			<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:article-id[fn:namespace-uri() eq '']/@pub-id-type">
				<doi>
					<xsl:sequence select="()"/>
				</doi>
			</xsl:for-each>
			<author>
				<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:contrib[fn:namespace-uri() eq '']/*:string-name[fn:namespace-uri() eq '']">
					<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
				</xsl:for-each>
				<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:contrib[fn:namespace-uri() eq '']/*:email[fn:namespace-uri() eq '']">
					<xsl:attribute name="email" namespace="" select="fn:string(.)"/>
				</xsl:for-each>
				<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:contrib[fn:namespace-uri() eq '']/*:name[fn:namespace-uri() eq '']/*:given-names[fn:namespace-uri() eq '']">
					<firstName>
						<xsl:sequence select="()"/>
					</firstName>
				</xsl:for-each>
				<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:contrib[fn:namespace-uri() eq '']/*:name[fn:namespace-uri() eq '']/*:surname[fn:namespace-uri() eq '']">
					<familyName>
						<xsl:sequence select="fn:string(.)"/>
					</familyName>
				</xsl:for-each>
				<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:contrib[fn:namespace-uri() eq '']/*:name[fn:namespace-uri() eq '']/*:prefix[fn:namespace-uri() eq '']">
					<prefix>
						<xsl:sequence select="fn:string(.)"/>
					</prefix>
				</xsl:for-each>
				<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:contrib[fn:namespace-uri() eq '']/*:name[fn:namespace-uri() eq '']/*:suffix[fn:namespace-uri() eq '']">
					<suffix>
						<xsl:sequence select="fn:string(.)"/>
					</suffix>
				</xsl:for-each>
				<affiliatedOrganisation>
					<organisation>
						<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:address[fn:namespace-uri() eq '']/*:institution[fn:namespace-uri() eq '']">
							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:address[fn:namespace-uri() eq '']/*:email[fn:namespace-uri() eq '']">
							<xsl:attribute name="email" namespace="" select="fn:string(.)"/>
						</xsl:for-each>
					</organisation>
					<fullName>
						<xsl:for-each select="($var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:address[fn:namespace-uri() eq '']/*:institution[fn:namespace-uri() eq '']/node())[fn:boolean(self::text())]">
							<xsl:sequence select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:address[fn:namespace-uri() eq '']/*:institution[fn:namespace-uri() eq '']/*:sub[fn:namespace-uri() eq '']">
							<c:sub>
								<xsl:sequence select="fn:string(.)"/>
							</c:sub>
						</xsl:for-each>
						<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:address[fn:namespace-uri() eq '']/*:institution[fn:namespace-uri() eq '']/*:sup[fn:namespace-uri() eq '']">
							<c:sup>
								<xsl:sequence select="fn:string(.)"/>
							</c:sup>
						</xsl:for-each>
					</fullName>
					<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:address[fn:namespace-uri() eq '']/*:addr-line[fn:namespace-uri() eq '']">
						<addressLine1>
							<xsl:sequence select="fn:string(.)"/>
						</addressLine1>
					</xsl:for-each>
					<xsl:for-each select="$var3_article/*:front[fn:namespace-uri() eq '']/*:article-meta[fn:namespace-uri() eq '']/*:contrib-group[fn:namespace-uri() eq '']/*:address[fn:namespace-uri() eq '']/*:country[fn:namespace-uri() eq '']">
						<country>
							<xsl:sequence select="fn:string(.)"/>
						</country>
					</xsl:for-each>
				</affiliatedOrganisation>
			</author>
		</item>
	</xsl:template>
</xsl:stylesheet>
